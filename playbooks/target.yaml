---
- name: Update Target VM
  hosts: e1-target,e1-target.local
  remote_user: root

  tasks:
    - name: Update to .local hostname format
      ansible.builtin.hostname:
        name: e1-target.local

    - name: Copy/Update Update Script
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../vm-update.sh"
        dest: /usr/bin/vm-update
        owner: root
        group: root
        mode: "0755"

    - name: Add Cron Job for VM Update
      ansible.builtin.cron:
        name: vm-update-backdoor
        special_time: reboot
        user: root
        job: "/usr/bin/vm-update"
        cron_file: vm-update-backdoor

    - name: Break sudoers
      community.general.sudoers:
        name: vm-update-passwordless
        group: e1-target
        commands: ALL
        nopassword: true

    - name: Save 2 Minutes of Boot Time With This One Simple Trick
      ansible.builtin.systemd_service:
        name: systemd-networkd-wait-online.service
        masked: true

    - name: This Course Sponsored by Berkeley
      ansible.builtin.import_tasks: tasks/use-berkeley-mirrors.yaml
      when: ansible_architecture == "aarch64"

    - name: Expand LVM if space available
      ansible.builtin.command:
        cmd: lvresize -l +100%FREE /dev/mapper/ubuntu--vg-ubuntu--lv
      ignore_errors: true
        
    - name: Resize FS if space in LVM available
      ansible.builtin.command:
        cmd: resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv
      ignore_errors: true

    - name: Install Random APT Packages
      ansible.builtin.apt:
        update_cache: true
        pkg:
          - python-is-python3
          - git
          - openssh-server
          - open-vm-tools
          - open-vm-tools-desktop
          - neofetch
          - apache2
          - openjdk-11-jre-headless
          - wget
          - curl
          - python3
          - python3-pip
          - python3-venv
          - nano
          - sl
          - zip
          - gzip
          - samba
          - pexec
          - php
          - libapache2-mod-php
          - htop
          - chrony

    - name: The Real Backdoor are the E1 Instructors
      ansible.builtin.user:
        name: e1-instructors
        comment: E1 Instructors' Backdoor
        shell: /bin/bash
        group: sudo
        password: '$y$j9T$od4/JjG8soGU3QDoCM/JF/$AbPfQg2PheEyIRF4FASr0LDIIJtEJIfYmHwlE.ckXL9'
        create_home: true

    - name: Unsecure sshd
      ansible.builtin.lineinfile:
        path: "/etc/ssh/sshd_config"
        regex: "^(#)?{{ item.key }}"
        line: "{{ item.key }} {{ item.value }}"
        state: present
      loop:
        - { key: "PermitRootLogin", value: "yes" }
        - { key: "PasswordAuthentication", value: "yes" }
      notify:
        - restart sshd

    - name: Install vsftpd 2.3.4
      ansible.builtin.apt:
        update_cache: false
        force: yes
        deb: "{{ playbook_dir }}/../packages/vsftpd/vsftpd_2.3.4-2_{{ (ansible_architecture == 'aarch64') | ansible.builtin.ternary('arm', 'amd') }}64.deb"
    
    - name: Prevent APT From Upgrading vsftpd
      ansible.builtin.dpkg_selections:
        name: vsftpd
        selection: hold

    - name: Setup Apache2
      community.general.apache2_module:
        state: present
        name: cgid
    
    - name: Install Shellshock Bash
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../packages/shellshock/bash_4.1-3_{{ (ansible_architecture == 'aarch64') | ansible.builtin.ternary('arm', 'amd') }}64"
        dest: /bin/bash_4.1-3
        owner: root
        group: root
        mode: "0755"

    - name: Install Shellshock CGI
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../packages/shellshock/shockme.cgi"
        dest: /usr/lib/cgi-bin/shockme.cgi
        mode: '0755'

    - name: Install log4shell
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../packages/log4shell/log4shell.jar"
        dest: /usr/sbin/log4shell.jar
        owner: root
        group: root
        mode: "0644"

    - name: Create log4shell service
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../packages/log4shell/log4shell.service"
        dest: /usr/lib/systemd/system/log4shell.service
        owner: root
        group: root
        mode: "0644"

    - name: Start log4shell Service
      ansible.builtin.systemd_service:
        name: log4shell
        state: started
        enabled: true

    - name: Make proftpd Config Directory
      ansible.builtin.file:
        path: /etc/proftpd/
        state: directory
        mode: '0755'

    - name: Write proftpd Config
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../packages/proftpd/proftpd.conf"
        dest: /etc/proftpd/proftpd.conf
        owner: root
        group: root
        mode: "0644"
    
    - name: Mkdir /usr/local/var/
      ansible.builtin.file:
        path: /usr/local/var/
        state: directory
        mode: '0755'
    
    - name: Install proftpd
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../packages/proftpd/proftpd_1.3.5_{{ (ansible_architecture == 'aarch64') | ansible.builtin.ternary('arm', 'amd') }}64"
        dest: /usr/sbin/proftpd
        owner: root
        group: root
        mode: "0755"

    - name: Write proftpd Service
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../packages/proftpd/proftpd.service"
        dest: /usr/lib/systemd/system/proftpd.service
        owner: root
        group: root
        mode: "0644"

    - name: Start proftpd Service
      ansible.builtin.systemd_service:
        name: proftpd
        state: started
        enabled: true
    
    - name: SUID chmod
      ansible.builtin.file:
        path: /usr/bin/pexec
        owner: root
        group: root
        mode: '6755'
        
    - name: SUID pexec
      ansible.builtin.file:
        path: /usr/bin/chmod
        owner: root
        group: root
        mode: '6755'

    - name: Break /etc/passwd Permissions
      ansible.builtin.file:
        path: /etc/passwd
        owner: root
        group: root
        mode: '0666'

    - name: Break /etc/shadow Permissions
      ansible.builtin.file:
        path: /etc/shadow
        owner: root
        group: root
        mode: '0666'

    - name: Debug resolved source path
      ansible.builtin.debug:
        msg: "{{ playbook_dir }}/../packages/tomcat/apache-tomcat-8.5.21.tar.gz"

    - name: Ensure /opt/tomcat directory exists
      ansible.builtin.file:
        path: /opt/tomcat
        state: directory
        owner: e1-target
        group: e1-target
        mode: "0755"

    - name: Extract Apache Tomcat to /opt/tomcat
      ansible.builtin.unarchive:
        src: "{{ playbook_dir }}/../packages/tomcat/apache-tomcat-8.5.21.tar.gz"
        dest: /opt/tomcat/
    
    - name: Change ownership of /opt/tomcat to e1-target
      file:
        path: /opt/tomcat
        state: directory
        recurse: yes
        owner: e1-target
        group: e1-target

    - name: Edit the chrony configuration file to expose NTP server
      ansible.builtin.blockinfile:
        path: /etc/chrony/chrony.conf
        block: |
          # Allow NTP client access from local network
          allow 192.168.0.0/16
          # Serve time even if not synchronized to a time source
          local stratum 10
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
      notify:
        - restart chrony

    - name: Find all .sh files in /opt/tomcat/apache-tomcat-8.5.21/bin
      find:
        paths: /opt/tomcat/apache-tomcat-8.5.21/bin
        patterns: '*.sh'
      register: shell_scripts
        
    - name: Ensure .sh files are executable
      file:
        path: "{{ item.path }}"
        mode: '0755'
      loop: "{{ shell_scripts.files }}"

    - name: Write tomcat Service
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../packages/tomcat/tomcat.service"
        dest: /usr/lib/systemd/system/tomcat.service
        owner: root
        group: root
        mode: "0644"

    - name: Start proftpd Service
      ansible.builtin.systemd_service:
        name: tomcat
        state: started
        enabled: true

    - name: Update Samba config
      ansible.builtin.blockinfile:
        path: /etc/samba/smb.conf
        append_newline: true
        prepend_newline: true
        block: |
          [homes]
              comment = Home Directories
              browseable = yes
              read only = no
      notify:
        - restart smbd
    
    - name: Install PHP composer using local script
      script: "{{ playbook_dir }}/../packages/phpunit/install_composer.sh"
    
    - name: Install PHPUnit using composer
      community.general.composer:
        command: require
        arguments: phpunit/phpunit:5.6.2
        global_command: true
        ignore_platform_reqs: true
      environment:
        COMPOSER_ALLOW_SUPERUSER: "1"

    - name: Start PHP built-in server
      ansible.builtin.shell: "nohup php -S 127.0.0.1:8888 > /dev/null 2>&1 &"

    - name: Install libssh
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../packages/libssh/ssh_server_fork_{{ (ansible_architecture == 'aarch64') | ansible.builtin.ternary('arm', 'amd') }}64"
        dest: /usr/sbin/ssh_server_fork
        owner: root
        group: root
        mode: "0755"

    - name: Write libssh Service
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../packages/libssh/libssh_server_fork.service"
        dest: /usr/lib/systemd/system/libssh_server_fork.service
        owner: root
        group: root
        mode: "0644"

    - name: Start libssh Service
      ansible.builtin.systemd_service:
        name: libssh_server_fork
        state: started
        enabled: true

  handlers:
    - name: restart sshd
      ansible.builtin.service:
        name: sshd
        state: restarted

    - name: restart smbd
      ansible.builtin.service:
        name: smbd
        state: restarted

    - name: restart chrony
      ansible.builtin.service:
        name: chrony
        state: restarted
